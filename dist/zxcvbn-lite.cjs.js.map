{"version":3,"file":"zxcvbn-lite.cjs.js","sources":["../src/frequency_lists.coffee","../src/adjacency_graphs.coffee","../src/scoring.coffee","../src/matching.coffee","../src/time_estimates.coffee","../src/feedback.coffee","../src/index.coffee"],"sourcesContent":["\nfrequency_lists = \n  passwords: \"123456,password,12345678,qwerty,123456789,12345,1234,111111,1234567,dragon,123123,baseball,abc123\".split(\",\")\n  english_wikipedia: \"the,of\".split(\",\")\n  female_names: \"mary,patricia\".split(\",\")\n  surnames: \"smith,johnson\".split(\",\")\n  us_tv_and_film: \"you,i\".split(\",\")\n  male_names: \"james,john\".split(\",\")\nmodule.exports = frequency_lists\n","# generated by scripts/build_keyboard_adjacency_graphs.py\nadjacency_graphs = \n  qwerty: {\"!\": [\"`~\", null, null, \"2@\", \"qQ\", null], \"\\\"\": [\";:\", \"[{\", \"]}\", null, null, \"/?\"], \"#\": [\"2@\", null, null, \"4$\", \"eE\", \"wW\"], \"$\": [\"3#\", null, null, \"5%\", \"rR\", \"eE\"], \"%\": [\"4$\", null, null, \"6^\", \"tT\", \"rR\"], \"&\": [\"6^\", null, null, \"8*\", \"uU\", \"yY\"], \"'\": [\";:\", \"[{\", \"]}\", null, null, \"/?\"], \"(\": [\"8*\", null, null, \"0)\", \"oO\", \"iI\"], \")\": [\"9(\", null, null, \"-_\", \"pP\", \"oO\"], \"*\": [\"7&\", null, null, \"9(\", \"iI\", \"uU\"], \"+\": [\"-_\", null, null, null, \"]}\", \"[{\"], \",\": [\"mM\", \"kK\", \"lL\", \".>\", null, null], \"-\": [\"0)\", null, null, \"=+\", \"[{\", \"pP\"], \".\": [\",<\", \"lL\", \";:\", \"/?\", null, null], \"/\": [\".>\", \";:\", \"'\\\"\", null, null, null], \"0\": [\"9(\", null, null, \"-_\", \"pP\", \"oO\"], \"1\": [\"`~\", null, null, \"2@\", \"qQ\", null], \"2\": [\"1!\", null, null, \"3#\", \"wW\", \"qQ\"], \"3\": [\"2@\", null, null, \"4$\", \"eE\", \"wW\"], \"4\": [\"3#\", null, null, \"5%\", \"rR\", \"eE\"], \"5\": [\"4$\", null, null, \"6^\", \"tT\", \"rR\"], \"6\": [\"5%\", null, null, \"7&\", \"yY\", \"tT\"], \"7\": [\"6^\", null, null, \"8*\", \"uU\", \"yY\"], \"8\": [\"7&\", null, null, \"9(\", \"iI\", \"uU\"], \"9\": [\"8*\", null, null, \"0)\", \"oO\", \"iI\"], \":\": [\"lL\", \"pP\", \"[{\", \"'\\\"\", \"/?\", \".>\"], \";\": [\"lL\", \"pP\", \"[{\", \"'\\\"\", \"/?\", \".>\"], \"<\": [\"mM\", \"kK\", \"lL\", \".>\", null, null], \"=\": [\"-_\", null, null, null, \"]}\", \"[{\"], \">\": [\",<\", \"lL\", \";:\", \"/?\", null, null], \"?\": [\".>\", \";:\", \"'\\\"\", null, null, null], \"@\": [\"1!\", null, null, \"3#\", \"wW\", \"qQ\"], \"A\": [null, \"qQ\", \"wW\", \"sS\", \"zZ\", null], \"B\": [\"vV\", \"gG\", \"hH\", \"nN\", null, null], \"C\": [\"xX\", \"dD\", \"fF\", \"vV\", null, null], \"D\": [\"sS\", \"eE\", \"rR\", \"fF\", \"cC\", \"xX\"], \"E\": [\"wW\", \"3#\", \"4$\", \"rR\", \"dD\", \"sS\"], \"F\": [\"dD\", \"rR\", \"tT\", \"gG\", \"vV\", \"cC\"], \"G\": [\"fF\", \"tT\", \"yY\", \"hH\", \"bB\", \"vV\"], \"H\": [\"gG\", \"yY\", \"uU\", \"jJ\", \"nN\", \"bB\"], \"I\": [\"uU\", \"8*\", \"9(\", \"oO\", \"kK\", \"jJ\"], \"J\": [\"hH\", \"uU\", \"iI\", \"kK\", \"mM\", \"nN\"], \"K\": [\"jJ\", \"iI\", \"oO\", \"lL\", \",<\", \"mM\"], \"L\": [\"kK\", \"oO\", \"pP\", \";:\", \".>\", \",<\"], \"M\": [\"nN\", \"jJ\", \"kK\", \",<\", null, null], \"N\": [\"bB\", \"hH\", \"jJ\", \"mM\", null, null], \"O\": [\"iI\", \"9(\", \"0)\", \"pP\", \"lL\", \"kK\"], \"P\": [\"oO\", \"0)\", \"-_\", \"[{\", \";:\", \"lL\"], \"Q\": [null, \"1!\", \"2@\", \"wW\", \"aA\", null], \"R\": [\"eE\", \"4$\", \"5%\", \"tT\", \"fF\", \"dD\"], \"S\": [\"aA\", \"wW\", \"eE\", \"dD\", \"xX\", \"zZ\"], \"T\": [\"rR\", \"5%\", \"6^\", \"yY\", \"gG\", \"fF\"], \"U\": [\"yY\", \"7&\", \"8*\", \"iI\", \"jJ\", \"hH\"], \"V\": [\"cC\", \"fF\", \"gG\", \"bB\", null, null], \"W\": [\"qQ\", \"2@\", \"3#\", \"eE\", \"sS\", \"aA\"], \"X\": [\"zZ\", \"sS\", \"dD\", \"cC\", null, null], \"Y\": [\"tT\", \"6^\", \"7&\", \"uU\", \"hH\", \"gG\"], \"Z\": [null, \"aA\", \"sS\", \"xX\", null, null], \"[\": [\"pP\", \"-_\", \"=+\", \"]}\", \"'\\\"\", \";:\"], \"\\\\\": [\"]}\", null, null, null, null, null], \"]\": [\"[{\", \"=+\", null, \"\\\\|\", null, \"'\\\"\"], \"^\": [\"5%\", null, null, \"7&\", \"yY\", \"tT\"], \"_\": [\"0)\", null, null, \"=+\", \"[{\", \"pP\"], \"`\": [null, null, null, \"1!\", null, null], \"a\": [null, \"qQ\", \"wW\", \"sS\", \"zZ\", null], \"b\": [\"vV\", \"gG\", \"hH\", \"nN\", null, null], \"c\": [\"xX\", \"dD\", \"fF\", \"vV\", null, null], \"d\": [\"sS\", \"eE\", \"rR\", \"fF\", \"cC\", \"xX\"], \"e\": [\"wW\", \"3#\", \"4$\", \"rR\", \"dD\", \"sS\"], \"f\": [\"dD\", \"rR\", \"tT\", \"gG\", \"vV\", \"cC\"], \"g\": [\"fF\", \"tT\", \"yY\", \"hH\", \"bB\", \"vV\"], \"h\": [\"gG\", \"yY\", \"uU\", \"jJ\", \"nN\", \"bB\"], \"i\": [\"uU\", \"8*\", \"9(\", \"oO\", \"kK\", \"jJ\"], \"j\": [\"hH\", \"uU\", \"iI\", \"kK\", \"mM\", \"nN\"], \"k\": [\"jJ\", \"iI\", \"oO\", \"lL\", \",<\", \"mM\"], \"l\": [\"kK\", \"oO\", \"pP\", \";:\", \".>\", \",<\"], \"m\": [\"nN\", \"jJ\", \"kK\", \",<\", null, null], \"n\": [\"bB\", \"hH\", \"jJ\", \"mM\", null, null], \"o\": [\"iI\", \"9(\", \"0)\", \"pP\", \"lL\", \"kK\"], \"p\": [\"oO\", \"0)\", \"-_\", \"[{\", \";:\", \"lL\"], \"q\": [null, \"1!\", \"2@\", \"wW\", \"aA\", null], \"r\": [\"eE\", \"4$\", \"5%\", \"tT\", \"fF\", \"dD\"], \"s\": [\"aA\", \"wW\", \"eE\", \"dD\", \"xX\", \"zZ\"], \"t\": [\"rR\", \"5%\", \"6^\", \"yY\", \"gG\", \"fF\"], \"u\": [\"yY\", \"7&\", \"8*\", \"iI\", \"jJ\", \"hH\"], \"v\": [\"cC\", \"fF\", \"gG\", \"bB\", null, null], \"w\": [\"qQ\", \"2@\", \"3#\", \"eE\", \"sS\", \"aA\"], \"x\": [\"zZ\", \"sS\", \"dD\", \"cC\", null, null], \"y\": [\"tT\", \"6^\", \"7&\", \"uU\", \"hH\", \"gG\"], \"z\": [null, \"aA\", \"sS\", \"xX\", null, null], \"{\": [\"pP\", \"-_\", \"=+\", \"]}\", \"'\\\"\", \";:\"], \"|\": [\"]}\", null, null, null, null, null], \"}\": [\"[{\", \"=+\", null, \"\\\\|\", null, \"'\\\"\"], \"~\": [null, null, null, \"1!\", null, null]}\n  dvorak: {\"!\": [\"`~\", null, null, \"2@\", \"'\\\"\", null], \"\\\"\": [null, \"1!\", \"2@\", \",<\", \"aA\", null], \"#\": [\"2@\", null, null, \"4$\", \".>\", \",<\"], \"$\": [\"3#\", null, null, \"5%\", \"pP\", \".>\"], \"%\": [\"4$\", null, null, \"6^\", \"yY\", \"pP\"], \"&\": [\"6^\", null, null, \"8*\", \"gG\", \"fF\"], \"'\": [null, \"1!\", \"2@\", \",<\", \"aA\", null], \"(\": [\"8*\", null, null, \"0)\", \"rR\", \"cC\"], \")\": [\"9(\", null, null, \"[{\", \"lL\", \"rR\"], \"*\": [\"7&\", null, null, \"9(\", \"cC\", \"gG\"], \"+\": [\"/?\", \"]}\", null, \"\\\\|\", null, \"-_\"], \",\": [\"'\\\"\", \"2@\", \"3#\", \".>\", \"oO\", \"aA\"], \"-\": [\"sS\", \"/?\", \"=+\", null, null, \"zZ\"], \".\": [\",<\", \"3#\", \"4$\", \"pP\", \"eE\", \"oO\"], \"/\": [\"lL\", \"[{\", \"]}\", \"=+\", \"-_\", \"sS\"], \"0\": [\"9(\", null, null, \"[{\", \"lL\", \"rR\"], \"1\": [\"`~\", null, null, \"2@\", \"'\\\"\", null], \"2\": [\"1!\", null, null, \"3#\", \",<\", \"'\\\"\"], \"3\": [\"2@\", null, null, \"4$\", \".>\", \",<\"], \"4\": [\"3#\", null, null, \"5%\", \"pP\", \".>\"], \"5\": [\"4$\", null, null, \"6^\", \"yY\", \"pP\"], \"6\": [\"5%\", null, null, \"7&\", \"fF\", \"yY\"], \"7\": [\"6^\", null, null, \"8*\", \"gG\", \"fF\"], \"8\": [\"7&\", null, null, \"9(\", \"cC\", \"gG\"], \"9\": [\"8*\", null, null, \"0)\", \"rR\", \"cC\"], \":\": [null, \"aA\", \"oO\", \"qQ\", null, null], \";\": [null, \"aA\", \"oO\", \"qQ\", null, null], \"<\": [\"'\\\"\", \"2@\", \"3#\", \".>\", \"oO\", \"aA\"], \"=\": [\"/?\", \"]}\", null, \"\\\\|\", null, \"-_\"], \">\": [\",<\", \"3#\", \"4$\", \"pP\", \"eE\", \"oO\"], \"?\": [\"lL\", \"[{\", \"]}\", \"=+\", \"-_\", \"sS\"], \"@\": [\"1!\", null, null, \"3#\", \",<\", \"'\\\"\"], \"A\": [null, \"'\\\"\", \",<\", \"oO\", \";:\", null], \"B\": [\"xX\", \"dD\", \"hH\", \"mM\", null, null], \"C\": [\"gG\", \"8*\", \"9(\", \"rR\", \"tT\", \"hH\"], \"D\": [\"iI\", \"fF\", \"gG\", \"hH\", \"bB\", \"xX\"], \"E\": [\"oO\", \".>\", \"pP\", \"uU\", \"jJ\", \"qQ\"], \"F\": [\"yY\", \"6^\", \"7&\", \"gG\", \"dD\", \"iI\"], \"G\": [\"fF\", \"7&\", \"8*\", \"cC\", \"hH\", \"dD\"], \"H\": [\"dD\", \"gG\", \"cC\", \"tT\", \"mM\", \"bB\"], \"I\": [\"uU\", \"yY\", \"fF\", \"dD\", \"xX\", \"kK\"], \"J\": [\"qQ\", \"eE\", \"uU\", \"kK\", null, null], \"K\": [\"jJ\", \"uU\", \"iI\", \"xX\", null, null], \"L\": [\"rR\", \"0)\", \"[{\", \"/?\", \"sS\", \"nN\"], \"M\": [\"bB\", \"hH\", \"tT\", \"wW\", null, null], \"N\": [\"tT\", \"rR\", \"lL\", \"sS\", \"vV\", \"wW\"], \"O\": [\"aA\", \",<\", \".>\", \"eE\", \"qQ\", \";:\"], \"P\": [\".>\", \"4$\", \"5%\", \"yY\", \"uU\", \"eE\"], \"Q\": [\";:\", \"oO\", \"eE\", \"jJ\", null, null], \"R\": [\"cC\", \"9(\", \"0)\", \"lL\", \"nN\", \"tT\"], \"S\": [\"nN\", \"lL\", \"/?\", \"-_\", \"zZ\", \"vV\"], \"T\": [\"hH\", \"cC\", \"rR\", \"nN\", \"wW\", \"mM\"], \"U\": [\"eE\", \"pP\", \"yY\", \"iI\", \"kK\", \"jJ\"], \"V\": [\"wW\", \"nN\", \"sS\", \"zZ\", null, null], \"W\": [\"mM\", \"tT\", \"nN\", \"vV\", null, null], \"X\": [\"kK\", \"iI\", \"dD\", \"bB\", null, null], \"Y\": [\"pP\", \"5%\", \"6^\", \"fF\", \"iI\", \"uU\"], \"Z\": [\"vV\", \"sS\", \"-_\", null, null, null], \"[\": [\"0)\", null, null, \"]}\", \"/?\", \"lL\"], \"\\\\\": [\"=+\", null, null, null, null, null], \"]\": [\"[{\", null, null, null, \"=+\", \"/?\"], \"^\": [\"5%\", null, null, \"7&\", \"fF\", \"yY\"], \"_\": [\"sS\", \"/?\", \"=+\", null, null, \"zZ\"], \"`\": [null, null, null, \"1!\", null, null], \"a\": [null, \"'\\\"\", \",<\", \"oO\", \";:\", null], \"b\": [\"xX\", \"dD\", \"hH\", \"mM\", null, null], \"c\": [\"gG\", \"8*\", \"9(\", \"rR\", \"tT\", \"hH\"], \"d\": [\"iI\", \"fF\", \"gG\", \"hH\", \"bB\", \"xX\"], \"e\": [\"oO\", \".>\", \"pP\", \"uU\", \"jJ\", \"qQ\"], \"f\": [\"yY\", \"6^\", \"7&\", \"gG\", \"dD\", \"iI\"], \"g\": [\"fF\", \"7&\", \"8*\", \"cC\", \"hH\", \"dD\"], \"h\": [\"dD\", \"gG\", \"cC\", \"tT\", \"mM\", \"bB\"], \"i\": [\"uU\", \"yY\", \"fF\", \"dD\", \"xX\", \"kK\"], \"j\": [\"qQ\", \"eE\", \"uU\", \"kK\", null, null], \"k\": [\"jJ\", \"uU\", \"iI\", \"xX\", null, null], \"l\": [\"rR\", \"0)\", \"[{\", \"/?\", \"sS\", \"nN\"], \"m\": [\"bB\", \"hH\", \"tT\", \"wW\", null, null], \"n\": [\"tT\", \"rR\", \"lL\", \"sS\", \"vV\", \"wW\"], \"o\": [\"aA\", \",<\", \".>\", \"eE\", \"qQ\", \";:\"], \"p\": [\".>\", \"4$\", \"5%\", \"yY\", \"uU\", \"eE\"], \"q\": [\";:\", \"oO\", \"eE\", \"jJ\", null, null], \"r\": [\"cC\", \"9(\", \"0)\", \"lL\", \"nN\", \"tT\"], \"s\": [\"nN\", \"lL\", \"/?\", \"-_\", \"zZ\", \"vV\"], \"t\": [\"hH\", \"cC\", \"rR\", \"nN\", \"wW\", \"mM\"], \"u\": [\"eE\", \"pP\", \"yY\", \"iI\", \"kK\", \"jJ\"], \"v\": [\"wW\", \"nN\", \"sS\", \"zZ\", null, null], \"w\": [\"mM\", \"tT\", \"nN\", \"vV\", null, null], \"x\": [\"kK\", \"iI\", \"dD\", \"bB\", null, null], \"y\": [\"pP\", \"5%\", \"6^\", \"fF\", \"iI\", \"uU\"], \"z\": [\"vV\", \"sS\", \"-_\", null, null, null], \"{\": [\"0)\", null, null, \"]}\", \"/?\", \"lL\"], \"|\": [\"=+\", null, null, null, null, null], \"}\": [\"[{\", null, null, null, \"=+\", \"/?\"], \"~\": [null, null, null, \"1!\", null, null]}\n  keypad: {\"*\": [\"/\", null, null, null, \"-\", \"+\", \"9\", \"8\"], \"+\": [\"9\", \"*\", \"-\", null, null, null, null, \"6\"], \"-\": [\"*\", null, null, null, null, null, \"+\", \"9\"], \".\": [\"0\", \"2\", \"3\", null, null, null, null, null], \"/\": [null, null, null, null, \"*\", \"9\", \"8\", \"7\"], \"0\": [null, \"1\", \"2\", \"3\", \".\", null, null, null], \"1\": [null, null, \"4\", \"5\", \"2\", \"0\", null, null], \"2\": [\"1\", \"4\", \"5\", \"6\", \"3\", \".\", \"0\", null], \"3\": [\"2\", \"5\", \"6\", null, null, null, \".\", \"0\"], \"4\": [null, null, \"7\", \"8\", \"5\", \"2\", \"1\", null], \"5\": [\"4\", \"7\", \"8\", \"9\", \"6\", \"3\", \"2\", \"1\"], \"6\": [\"5\", \"8\", \"9\", \"+\", null, null, \"3\", \"2\"], \"7\": [null, null, null, \"/\", \"8\", \"5\", \"4\", null], \"8\": [\"7\", null, \"/\", \"*\", \"9\", \"6\", \"5\", \"4\"], \"9\": [\"8\", \"/\", \"*\", \"-\", \"+\", null, \"6\", \"5\"]}\n  mac_keypad: {\"*\": [\"/\", null, null, null, null, null, \"-\", \"9\"], \"+\": [\"6\", \"9\", \"-\", null, null, null, null, \"3\"], \"-\": [\"9\", \"/\", \"*\", null, null, null, \"+\", \"6\"], \".\": [\"0\", \"2\", \"3\", null, null, null, null, null], \"/\": [\"=\", null, null, null, \"*\", \"-\", \"9\", \"8\"], \"0\": [null, \"1\", \"2\", \"3\", \".\", null, null, null], \"1\": [null, null, \"4\", \"5\", \"2\", \"0\", null, null], \"2\": [\"1\", \"4\", \"5\", \"6\", \"3\", \".\", \"0\", null], \"3\": [\"2\", \"5\", \"6\", \"+\", null, null, \".\", \"0\"], \"4\": [null, null, \"7\", \"8\", \"5\", \"2\", \"1\", null], \"5\": [\"4\", \"7\", \"8\", \"9\", \"6\", \"3\", \"2\", \"1\"], \"6\": [\"5\", \"8\", \"9\", \"-\", \"+\", null, \"3\", \"2\"], \"7\": [null, null, null, \"=\", \"8\", \"5\", \"4\", null], \"8\": [\"7\", null, \"=\", \"/\", \"9\", \"6\", \"5\", \"4\"], \"9\": [\"8\", \"=\", \"/\", \"*\", \"-\", \"+\", \"6\", \"5\"], \"=\": [null, null, null, null, \"/\", \"9\", \"8\", \"7\"]}\n\nmodule.exports = adjacency_graphs","adjacency_graphs = require('./adjacency_graphs')\n\n# on qwerty, 'g' has degree 6, being adjacent to 'ftyhbv'. '\\' has degree 1.\n# this calculates the average over all keys.\ncalc_average_degree = (graph) ->\n  average = 0\n  for key, neighbors of graph\n    average += (n for n in neighbors when n).length\n  average /= (k for k,v of graph).length\n  average\n\nBRUTEFORCE_CARDINALITY = 10\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50\n\nscoring =\n  nCk: (n, k) ->\n    # http://blog.plover.com/math/choose.html\n    return 0 if k > n\n    return 1 if k == 0\n    r = 1\n    for d in [1..k]\n      r *= n\n      r /= d\n      n -= 1\n    r\n\n  log10: (n) -> Math.log(n) / Math.log(10) # IE doesn't support Math.log10 :(\n  log2:  (n) -> Math.log(n) / Math.log(2)\n\n  factorial: (n) ->\n    # unoptimized, called only on small n\n    return 1 if n < 2\n    f = 1\n    f *= i for i in [2..n]\n    f\n\n  # ------------------------------------------------------------------------------\n  # search --- most guessable match sequence -------------------------------------\n  # ------------------------------------------------------------------------------\n  #\n  # takes a sequence of overlapping matches, returns the non-overlapping sequence with\n  # minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n  # for a length-n password with m candidate matches. l_max is the maximum optimal\n  # sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n  # search terminates rapidly.\n  #\n  # the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n  # minimizes the following function:\n  #\n  #    g = l! * Product(m.guesses for m in sequence) + D^(l - 1)\n  #\n  # where l is the length of the sequence.\n  #\n  # the factorial term is the number of ways to order l patterns.\n  #\n  # the D^(l-1) term is another length penalty, roughly capturing the idea that an\n  # attacker will try lower-length sequences first before trying length-l sequences.\n  #\n  # for example, consider a sequence that is date-repeat-dictionary.\n  #  - an attacker would need to try other date-repeat-dictionary combinations,\n  #    hence the product term.\n  #  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n  #    ..., hence the factorial term.\n  #  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n  #    sequences before length-3. assuming at minimum D guesses per pattern type,\n  #    D^(l-1) approximates Sum(D^i for i in [1..l-1]\n  #\n  # ------------------------------------------------------------------------------\n\n  most_guessable_match_sequence: (password, matches, _exclude_additive=false) ->\n\n    n = password.length\n\n    # partition matches into sublists according to ending index j\n    matches_by_j = ([] for _ in [0...n])\n    for m in matches\n      matches_by_j[m.j].push m\n    # small detail: for deterministic output, sort each sublist by i.\n    for lst in matches_by_j\n      lst.sort (m1, m2) -> m1.i - m2.i\n\n    optimal =\n      # optimal.m[k][l] holds final match in the best length-l match sequence covering the\n      # password prefix up to k, inclusive.\n      # if there is no length-l sequence that scores better (fewer guesses) than\n      # a shorter match sequence spanning the same prefix, optimal.m[k][l] is undefined.\n      m:  ({} for _ in [0...n])\n\n      # same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n      # optimal.pi allows for fast (non-looping) updates to the minimization function.\n      pi: ({} for _ in [0...n])\n\n      # same structure as optimal.m -- holds the overall metric.\n      g:  ({} for _ in [0...n])\n\n    # helper: considers whether a length-l sequence ending at match m is better (fewer guesses)\n    # than previously encountered sequences, updating state if so.\n    update = (m, l) =>\n      k = m.j\n      pi = @estimate_guesses m, password\n      if l > 1\n        # we're considering a length-l sequence ending with match m:\n        # obtain the product term in the minimization function by multiplying m's guesses\n        # by the product of the length-(l-1) sequence ending just before m, at m.i - 1.\n        pi *= optimal.pi[m.i - 1][l - 1]\n      # calculate the minimization func\n      g = @factorial(l) * pi\n      unless _exclude_additive\n        g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1)\n      # update state if new best.\n      # first see if any competing sequences covering this prefix, with l or fewer matches,\n      # fare better than this sequence. if so, skip it and return.\n      for competing_l, competing_g of optimal.g[k]\n        continue if competing_l > l\n        return if competing_g <= g\n      # this sequence might be part of the final optimal sequence.\n      optimal.g[k][l] = g\n      optimal.m[k][l] = m\n      optimal.pi[k][l] = pi\n\n    # helper: evaluate bruteforce matches ending at k.\n    bruteforce_update = (k) =>\n      # see if a single bruteforce match spanning the k-prefix is optimal.\n      m = make_bruteforce_match(0, k)\n      update(m, 1)\n      for i in [1..k]\n        # generate k bruteforce matches, spanning from (i=1, j=k) up to (i=k, j=k).\n        # see if adding these new matches to any of the sequences in optimal[i-1]\n        # leads to new bests.\n        m = make_bruteforce_match(i, k)\n        for l, last_m of optimal.m[i-1]\n          l = parseInt(l)\n          # corner: an optimal sequence will never have two adjacent bruteforce matches.\n          # it is strictly better to have a single bruteforce match spanning the same region:\n          # same contribution to the guess product with a lower length.\n          # --> safe to skip those cases.\n          continue if last_m.pattern == 'bruteforce'\n          # try adding m to this length-l sequence.\n          update(m, l + 1)\n\n    # helper: make bruteforce match objects spanning i to j, inclusive.\n    make_bruteforce_match = (i, j) =>\n      pattern: 'bruteforce'\n      token: password[i..j]\n      i: i\n      j: j\n\n    # helper: step backwards through optimal.m starting at the end,\n    # constructing the final optimal match sequence.\n    unwind = (n) =>\n      optimal_match_sequence = []\n      k = n - 1\n      # find the final best sequence length and score\n      l = undefined\n      g = Infinity\n      for candidate_l, candidate_g of optimal.g[k]\n        if candidate_g < g\n          l = candidate_l\n          g = candidate_g\n\n      while k >= 0\n        m = optimal.m[k][l]\n        optimal_match_sequence.unshift m\n        k = m.i - 1\n        l--\n      optimal_match_sequence\n\n    for k in [0...n]\n      for m in matches_by_j[k]\n        if m.i > 0\n          for l of optimal.m[m.i - 1]\n            l = parseInt(l)\n            update(m, l + 1)\n        else\n          update(m, 1)\n      bruteforce_update(k)\n    optimal_match_sequence = unwind(n)\n    optimal_l = optimal_match_sequence.length\n\n    # corner: empty password\n    if password.length == 0\n      guesses = 1\n    else\n      guesses = optimal.g[n - 1][optimal_l]\n\n    # final result object\n    password: password\n    guesses: guesses\n    guesses_log10: @log10 guesses\n    sequence: optimal_match_sequence\n\n  # ------------------------------------------------------------------------------\n  # guess estimation -- one function per match pattern ---------------------------\n  # ------------------------------------------------------------------------------\n\n  estimate_guesses: (match, password) ->\n    return match.guesses if match.guesses? # a match's guess estimate doesn't change. cache it.\n    min_guesses = 1\n    if match.token.length < password.length\n      min_guesses = if match.token.length == 1\n        MIN_SUBMATCH_GUESSES_SINGLE_CHAR\n      else\n        MIN_SUBMATCH_GUESSES_MULTI_CHAR\n    estimation_functions =\n      bruteforce: @bruteforce_guesses\n      dictionary: @dictionary_guesses\n      spatial:    @spatial_guesses\n      repeat:     @repeat_guesses\n      sequence:   @sequence_guesses\n      regex:      @regex_guesses\n      date:       @date_guesses\n    guesses = estimation_functions[match.pattern].call this, match\n    match.guesses = Math.max guesses, min_guesses\n    match.guesses_log10 = @log10 match.guesses\n    match.guesses\n\n  bruteforce_guesses: (match) ->\n    guesses = Math.pow BRUTEFORCE_CARDINALITY, match.token.length\n    if guesses == Number.POSITIVE_INFINITY\n        guesses = Number.MAX_VALUE;\n    # small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n    # submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n    min_guesses = if match.token.length == 1\n      MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1\n    else\n      MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1\n    Math.max guesses, min_guesses\n\n  repeat_guesses: (match) ->\n    match.base_guesses * match.repeat_count\n\n  sequence_guesses: (match) ->\n    first_chr = match.token.charAt(0)\n    # lower guesses for obvious starting points\n    if first_chr in ['a', 'A', 'z', 'Z', '0', '1', '9']\n      base_guesses = 4\n    else\n      if first_chr.match /\\d/\n        base_guesses = 10 # digits\n      else\n        # could give a higher base for uppercase,\n        # assigning 26 to both upper and lower sequences is more conservative.\n        base_guesses = 26\n    if not match.ascending\n      # need to try a descending sequence in addition to every ascending sequence ->\n      # 2x guesses\n      base_guesses *= 2\n    base_guesses * match.token.length\n\n  MIN_YEAR_SPACE: 20\n  REFERENCE_YEAR: new Date().getFullYear()\n\n  regex_guesses: (match) ->\n    char_class_bases =\n      alpha_lower:  26\n      alpha_upper:  26\n      alpha:        52\n      alphanumeric: 62\n      digits:       10\n      symbols:      33\n    if match.regex_name of char_class_bases\n      Math.pow(char_class_bases[match.regex_name], match.token.length)\n    else switch match.regex_name\n      when 'recent_year'\n        # conservative estimate of year space: num years from REFERENCE_YEAR.\n        # if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n        year_space = Math.abs parseInt(match.regex_match[0]) - @REFERENCE_YEAR\n        year_space = Math.max year_space, @MIN_YEAR_SPACE\n        year_space\n\n  date_guesses: (match) ->\n    # base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n    year_space = Math.max(Math.abs(match.year - @REFERENCE_YEAR), @MIN_YEAR_SPACE)\n    guesses = year_space * 365\n    # add factor of 4 for separator selection (one of ~4 choices)\n    guesses *= 4 if match.separator\n    guesses\n\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty)\n  # slightly different for keypad/mac keypad, but close enough\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad)\n\n  KEYBOARD_STARTING_POSITIONS: (k for k,v of adjacency_graphs.qwerty).length\n  KEYPAD_STARTING_POSITIONS: (k for k,v of adjacency_graphs.keypad).length\n\n  spatial_guesses: (match) ->\n    if match.graph in ['qwerty', 'dvorak']\n      s = @KEYBOARD_STARTING_POSITIONS\n      d = @KEYBOARD_AVERAGE_DEGREE\n    else\n      s = @KEYPAD_STARTING_POSITIONS\n      d = @KEYPAD_AVERAGE_DEGREE\n    guesses = 0\n    L = match.token.length\n    t = match.turns\n    # estimate the number of possible patterns w/ length L or less with t turns or less.\n    for i in [2..L]\n      possible_turns = Math.min(t, i - 1)\n      for j in [1..possible_turns]\n        guesses += @nCk(i - 1, j - 1) * s * Math.pow(d, j)\n    # add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    # math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if match.shifted_count\n      S = match.shifted_count\n      U = match.token.length - match.shifted_count # unshifted count\n      if S == 0 or U == 0\n        guesses *= 2\n      else\n        shifted_variations = 0\n        shifted_variations += @nCk(S + U, i) for i in [1..Math.min(S, U)]\n        guesses *= shifted_variations\n    guesses\n\n  dictionary_guesses: (match) ->\n    match.base_guesses = match.rank # keep these as properties for display purposes\n    match.uppercase_variations = @uppercase_variations match\n    match.l33t_variations = @l33t_variations match\n    reversed_variations = match.reversed and 2 or 1\n    match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations\n\n  START_UPPER: /^[A-Z][^A-Z]+$/\n  END_UPPER: /^[^A-Z]+[A-Z]$/\n  ALL_UPPER: /^[^a-z]+$/\n  ALL_LOWER: /^[^A-Z]+$/\n\n  uppercase_variations: (match) ->\n    word = match.token\n    return 1 if word.match(@ALL_LOWER) or word.toLowerCase() == word\n    # a capitalized word is the most common capitalization scheme,\n    # so it only doubles the search space (uncapitalized + capitalized).\n    # allcaps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    for regex in [@START_UPPER, @END_UPPER, @ALL_UPPER]\n      return 2 if word.match regex\n    # otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    # with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    # the number of ways to lowercase U+L letters with L lowercase letters or less.\n    U = (chr for chr in word.split('') when chr.match /[A-Z]/).length\n    L = (chr for chr in word.split('') when chr.match /[a-z]/).length\n    variations = 0\n    variations += @nCk(U + L, i) for i in [1..Math.min(U, L)]\n    variations\n\n  l33t_variations: (match) ->\n    return 1 if not match.l33t\n    variations = 1\n    for subbed, unsubbed of match.sub\n      # lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n      chrs = match.token.toLowerCase().split('')\n      S = (chr for chr in chrs when chr == subbed).length   # num of subbed chars\n      U = (chr for chr in chrs when chr == unsubbed).length # num of unsubbed chars\n      if S == 0 or U == 0\n        # for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n        # treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n        # unsubbed.)\n        variations *= 2\n      else\n        # this case is similar to capitalization:\n        # with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n        p = Math.min(U, S)\n        possibilities = 0\n        possibilities += @nCk(U + S, i) for i in [1..p]\n        variations *= possibilities\n    variations\n\n  # utilities --------------------------------------------------------------------\n\nmodule.exports = scoring","frequency_lists = require('./frequency_lists')\nadjacency_graphs = require('./adjacency_graphs')\nscoring = require('./scoring')\n\nbuild_ranked_dict = (ordered_list) ->\n  result = {}\n  i = 1 # rank starts at 1, not 0\n  for word in ordered_list\n    result[word] = i\n    i += 1\n  result\n\nRANKED_DICTIONARIES = {}\nfor name, lst of frequency_lists\n  RANKED_DICTIONARIES[name] = build_ranked_dict lst\n\nGRAPHS =\n  qwerty:     adjacency_graphs.qwerty\n  dvorak:     adjacency_graphs.dvorak\n  keypad:     adjacency_graphs.keypad\n  mac_keypad: adjacency_graphs.mac_keypad\n\nL33T_TABLE =\n  a: ['4', '@']\n  b: ['8']\n  c: ['(', '{', '[', '<']\n  e: ['3']\n  g: ['6', '9']\n  i: ['1', '!', '|']\n  l: ['1', '|', '7']\n  o: ['0']\n  s: ['$', '5']\n  t: ['+', '7']\n  x: ['%']\n  z: ['2']\n\nREGEXEN =\n  recent_year:  /19\\d\\d|200\\d|201\\d/g\n\nDATE_MAX_YEAR = 2050\nDATE_MIN_YEAR = 1000\nDATE_SPLITS =\n  4:[      # for length-4 strings, eg 1191 or 9111, two ways to split:\n    [1, 2] # 1 1 91 (2nd split starts at index 1, 3rd at index 2)\n    [2, 3] # 91 1 1\n    ]\n  5:[\n    [1, 3] # 1 11 91\n    [2, 3] # 11 1 91\n    ]\n  6:[\n    [1, 2] # 1 1 1991\n    [2, 4] # 11 11 91\n    [4, 5] # 1991 1 1\n    ]\n  7:[\n    [1, 3] # 1 11 1991\n    [2, 3] # 11 1 1991\n    [4, 5] # 1991 1 11\n    [4, 6] # 1991 11 1\n    ]\n  8:[\n    [2, 4] # 11 11 1991\n    [4, 6] # 1991 11 11\n    ]\n\nmatching =\n  empty: (obj) -> (k for k of obj).length == 0\n  extend: (lst, lst2) -> lst.push.apply lst, lst2\n  translate: (string, chr_map) -> (chr_map[chr] or chr for chr in string.split('')).join('')\n  mod: (n, m) -> ((n % m) + m) % m # mod impl that works for negative numbers\n  sorted: (matches) ->\n    # sort on i primary, j secondary\n    matches.sort (m1, m2) ->\n      (m1.i - m2.i) or (m1.j - m2.j)\n\n  # ------------------------------------------------------------------------------\n  # omnimatch -- combine everything ----------------------------------------------\n  # ------------------------------------------------------------------------------\n\n  omnimatch: (password) ->\n    matches = []\n    matchers = [\n      @dictionary_match\n      @reverse_dictionary_match\n      @l33t_match\n      @spatial_match\n      @repeat_match\n      @sequence_match\n      @regex_match\n      @date_match\n    ]\n    for matcher in matchers\n      @extend matches, matcher.call(this, password)\n    @sorted matches\n\n  #-------------------------------------------------------------------------------\n  # dictionary match (common passwords, english, last names, etc) ----------------\n  #-------------------------------------------------------------------------------\n\n  dictionary_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES) ->\n    # _ranked_dictionaries variable is for unit testing purposes\n    matches = []\n    len = password.length\n    password_lower = password.toLowerCase()\n    for dictionary_name, ranked_dict of _ranked_dictionaries\n      for i in [0...len]\n        for j in [i...len]\n          if password_lower[i..j] of ranked_dict\n            word = password_lower[i..j]\n            rank = ranked_dict[word]\n            matches.push\n              pattern: 'dictionary'\n              i: i\n              j: j\n              token: password[i..j]\n              matched_word: word\n              rank: rank\n              dictionary_name: dictionary_name\n              reversed: false\n              l33t: false\n    @sorted matches\n\n  reverse_dictionary_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES) ->\n    reversed_password = password.split('').reverse().join('')\n    matches = @dictionary_match reversed_password, _ranked_dictionaries\n    for match in matches\n      match.token = match.token.split('').reverse().join('') # reverse back\n      match.reversed = true\n      # map coordinates back to original string\n      [match.i, match.j] = [\n        password.length - 1 - match.j\n        password.length - 1 - match.i\n      ]\n    @sorted matches\n\n  set_user_input_dictionary: (ordered_list) ->\n    RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict ordered_list.slice()\n\n  #-------------------------------------------------------------------------------\n  # dictionary match with common l33t substitutions ------------------------------\n  #-------------------------------------------------------------------------------\n\n  # makes a pruned copy of l33t_table that only includes password's possible substitutions\n  relevant_l33t_subtable: (password, table) ->\n    password_chars = {}\n    for chr in password.split('')\n      password_chars[chr] = true\n    subtable = {}\n    for letter, subs of table\n      relevant_subs = (sub for sub in subs when sub of password_chars)\n      if relevant_subs.length > 0\n        subtable[letter] = relevant_subs\n    subtable\n\n  # returns the list of possible 1337 replacement dictionaries for a given password\n  enumerate_l33t_subs: (table) ->\n    keys = (k for k of table)\n    subs = [[]]\n\n    dedup = (subs) ->\n      deduped = []\n      members = {}\n      for sub in subs\n        assoc = ([k,v] for k,v in sub)\n        assoc.sort()\n        label = (k+','+v for k,v in assoc).join('-')\n        unless label of members\n          members[label] = true\n          deduped.push sub\n      deduped\n\n    helper = (keys) ->\n      return if not keys.length\n      first_key = keys[0]\n      rest_keys = keys[1..]\n      next_subs = []\n      for l33t_chr in table[first_key]\n        for sub in subs\n          dup_l33t_index = -1\n          for i in [0...sub.length]\n            if sub[i][0] == l33t_chr\n              dup_l33t_index = i\n              break\n          if dup_l33t_index == -1\n            sub_extension = sub.concat [[l33t_chr, first_key]]\n            next_subs.push sub_extension\n          else\n            sub_alternative = sub.slice(0)\n            sub_alternative.splice(dup_l33t_index, 1)\n            sub_alternative.push [l33t_chr, first_key]\n            next_subs.push sub\n            next_subs.push sub_alternative\n      subs = dedup next_subs\n      helper(rest_keys)\n\n    helper(keys)\n    sub_dicts = [] # convert from assoc lists to dicts\n    for sub in subs\n      sub_dict = {}\n      for [l33t_chr, chr] in sub\n        sub_dict[l33t_chr] = chr\n      sub_dicts.push sub_dict\n    sub_dicts\n\n  l33t_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES, _l33t_table = L33T_TABLE) ->\n    matches = []\n    for sub in @enumerate_l33t_subs @relevant_l33t_subtable(password, _l33t_table)\n      break if @empty sub # corner case: password has no relevant subs.\n      subbed_password = @translate password, sub\n      for match in @dictionary_match(subbed_password, _ranked_dictionaries)\n        token = password[match.i..match.j]\n        if token.toLowerCase() == match.matched_word\n          continue # only return the matches that contain an actual substitution\n        match_sub = {} # subset of mappings in sub that are in use for this match\n        for subbed_chr, chr of sub when token.indexOf(subbed_chr) != -1\n          match_sub[subbed_chr] = chr\n        match.l33t = true\n        match.token = token\n        match.sub = match_sub\n        match.sub_display = (\"#{k} -> #{v}\" for k,v of match_sub).join(', ')\n        matches.push match\n    @sorted matches.filter (match) ->\n      # filter single-character l33t matches to reduce noise.\n      # otherwise '1' matches 'i', '4' matches 'a', both very common English words\n      # with low dictionary rank.\n      match.token.length > 1\n\n  # ------------------------------------------------------------------------------\n  # spatial match (qwerty/dvorak/keypad) -----------------------------------------\n  # ------------------------------------------------------------------------------\n\n  spatial_match: (password, _graphs = GRAPHS) ->\n    matches = []\n    for graph_name, graph of _graphs\n      @extend matches, @spatial_match_helper(password, graph, graph_name)\n    @sorted matches\n\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/\n  spatial_match_helper: (password, graph, graph_name) ->\n    matches = []\n    i = 0\n    while i < password.length - 1\n      j = i + 1\n      last_direction = null\n      turns = 0\n      if graph_name in ['qwerty', 'dvorak'] and @SHIFTED_RX.exec(password.charAt(i))\n        # initial character is shifted\n        shifted_count = 1\n      else\n        shifted_count = 0\n      loop\n        prev_char = password.charAt(j-1)\n        found = false\n        found_direction = -1\n        cur_direction = -1\n        adjacents = graph[prev_char] or []\n        # consider growing pattern by one character if j hasn't gone over the edge.\n        if j < password.length\n          cur_char = password.charAt(j)\n          for adj in adjacents\n            cur_direction += 1\n            if adj and adj.indexOf(cur_char) != -1\n              found = true\n              found_direction = cur_direction\n              if adj.indexOf(cur_char) == 1\n                # index 1 in the adjacency means the key is shifted,\n                # 0 means unshifted: A vs a, % vs 5, etc.\n                # for example, 'q' is adjacent to the entry '2@'.\n                # @ is shifted w/ index 1, 2 is unshifted.\n                shifted_count += 1\n              if last_direction != found_direction\n                # adding a turn is correct even in the initial case when last_direction is null:\n                # every spatial pattern starts with a turn.\n                turns += 1\n                last_direction = found_direction\n              break\n        # if the current pattern continued, extend j and try to grow again\n        if found\n          j += 1\n        # otherwise push the pattern discovered so far, if any...\n        else\n          if j - i > 2 # don't consider length 1 or 2 chains.\n            matches.push\n              pattern: 'spatial'\n              i: i\n              j: j-1\n              token: password[i...j]\n              graph: graph_name\n              turns: turns\n              shifted_count: shifted_count\n          # ...and then start a new search for the rest of the password.\n          i = j\n          break\n    matches\n\n  #-------------------------------------------------------------------------------\n  # repeats (aaa, abcabcabc) and sequences (abcdef) ------------------------------\n  #-------------------------------------------------------------------------------\n\n  repeat_match: (password) ->\n    matches = []\n    greedy = /(.+)\\1+/g\n    lazy = /(.+?)\\1+/g\n    lazy_anchored = /^(.+?)\\1+$/\n    lastIndex = 0\n    while lastIndex < password.length\n      greedy.lastIndex = lazy.lastIndex = lastIndex\n      greedy_match = greedy.exec password\n      lazy_match = lazy.exec password\n      break unless greedy_match?\n      if greedy_match[0].length > lazy_match[0].length\n        # greedy beats lazy for 'aabaab'\n        #   greedy: [aabaab, aab]\n        #   lazy:   [aa,     a]\n        match = greedy_match\n        # greedy's repeated string might itself be repeated, eg.\n        # aabaab in aabaabaabaab.\n        # run an anchored lazy match on greedy's repeated string\n        # to find the shortest repeated string\n        base_token = lazy_anchored.exec(match[0])[1]\n      else\n        # lazy beats greedy for 'aaaaa'\n        #   greedy: [aaaa,  aa]\n        #   lazy:   [aaaaa, a]\n        match = lazy_match\n        base_token = match[1]\n      [i, j] = [match.index, match.index + match[0].length - 1]\n      # recursively match and score the base string\n      base_analysis = scoring.most_guessable_match_sequence(\n        base_token\n        @omnimatch base_token\n      )\n      base_matches = base_analysis.sequence\n      base_guesses = base_analysis.guesses\n      matches.push\n        pattern: 'repeat'\n        i: i\n        j: j\n        token: match[0]\n        base_token: base_token\n        base_guesses: base_guesses\n        base_matches: base_matches\n        repeat_count: match[0].length / base_token.length\n      lastIndex = j + 1\n    matches\n\n  MAX_DELTA: 5\n  sequence_match: (password) ->\n    # Identifies sequences by looking for repeated differences in unicode codepoint.\n    # this allows skipping, such as 9753, and also matches some extended unicode sequences\n    # such as Greek and Cyrillic alphabets.\n    #\n    # for example, consider the input 'abcdb975zy'\n    #\n    # password: a   b   c   d   b    9   7   5   z   y\n    # index:    0   1   2   3   4    5   6   7   8   9\n    # delta:      1   1   1  -2  -41  -2  -2  69   1\n    #\n    # expected result:\n    # [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n\n    return [] if password.length == 1\n\n    update = (i, j, delta) =>\n      if j - i > 1 or Math.abs(delta) == 1\n        if 0 < Math.abs(delta) <= @MAX_DELTA\n          token = password[i..j]\n          if /^[a-z]+$/.test(token)\n            sequence_name = 'lower'\n            sequence_space = 26\n          else if /^[A-Z]+$/.test(token)\n            sequence_name = 'upper'\n            sequence_space = 26\n          else if /^\\d+$/.test(token)\n            sequence_name = 'digits'\n            sequence_space = 10\n          else\n            # conservatively stick with roman alphabet size.\n            # (this could be improved)\n            sequence_name = 'unicode'\n            sequence_space = 26\n          result.push\n            pattern: 'sequence'\n            i: i\n            j: j\n            token: password[i..j]\n            sequence_name: sequence_name\n            sequence_space: sequence_space\n            ascending: delta > 0\n\n    result = []\n    i = 0\n    last_delta = null\n\n    for k in [1...password.length]\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1)\n      unless last_delta?\n        last_delta = delta\n      continue if delta == last_delta\n      j = k - 1\n      update(i, j, last_delta)\n      i = j\n      last_delta = delta\n    update(i, password.length - 1, last_delta)\n    result\n\n  #-------------------------------------------------------------------------------\n  # regex matching ---------------------------------------------------------------\n  #-------------------------------------------------------------------------------\n\n  regex_match: (password, _regexen = REGEXEN) ->\n    matches = []\n    for name, regex of _regexen\n      regex.lastIndex = 0 # keeps regex_match stateless\n      while rx_match = regex.exec password\n        token = rx_match[0]\n        matches.push\n          pattern: 'regex'\n          token: token\n          i: rx_match.index\n          j: rx_match.index + rx_match[0].length - 1\n          regex_name: name\n          regex_match: rx_match\n    @sorted matches\n\n  #-------------------------------------------------------------------------------\n  # date matching ----------------------------------------------------------------\n  #-------------------------------------------------------------------------------\n\n  date_match: (password) ->\n    # a \"date\" is recognized as:\n    #   any 3-tuple that starts or ends with a 2- or 4-digit year,\n    #   with 2 or 0 separator chars (1.1.91 or 1191),\n    #   maybe zero-padded (01-01-91 vs 1-1-91),\n    #   a month between 1 and 12,\n    #   a day between 1 and 31.\n    #\n    # note: this isn't true date parsing in that \"feb 31st\" is allowed,\n    # this doesn't check for leap years, etc.\n    #\n    # recipe:\n    # start with regex to find maybe-dates, then attempt to map the integers\n    # onto month-day-year to filter the maybe-dates into dates.\n    # finally, remove matches that are substrings of other matches to reduce noise.\n    #\n    # note: instead of using a lazy or greedy regex to find many dates over the full string,\n    # this uses a ^...$ regex against every substring of the password -- less performant but leads\n    # to every possible date match.\n    matches = []\n    maybe_date_no_separator = /^\\d{4,8}$/\n    maybe_date_with_separator = ///\n      ^\n      ( \\d{1,4} )    # day, month, year\n      ( [\\s/\\\\_.-] ) # separator\n      ( \\d{1,2} )    # day, month\n      \\2             # same separator\n      ( \\d{1,4} )    # day, month, year\n      $\n    ///\n\n    # dates without separators are between length 4 '1191' and 8 '11111991'\n    for i in [0..password.length - 4]\n      for j in [i + 3..i + 7]\n        break if j >= password.length\n        token = password[i..j]\n        continue unless maybe_date_no_separator.exec token\n        candidates = []\n        for [k,l] in DATE_SPLITS[token.length]\n          dmy = @map_ints_to_dmy [\n            parseInt token[0...k]\n            parseInt token[k...l]\n            parseInt token[l...]\n          ]\n          candidates.push dmy if dmy?\n        continue unless candidates.length > 0\n        # at this point: different possible dmy mappings for the same i,j substring.\n        # match the candidate date that likely takes the fewest guesses: a year closest to 2000.\n        # (scoring.REFERENCE_YEAR).\n        #\n        # ie, considering '111504', prefer 11-15-04 to 1-1-1504\n        # (interpreting '04' as 2004)\n        best_candidate = candidates[0]\n        metric = (candidate) -> Math.abs candidate.year - scoring.REFERENCE_YEAR\n        min_distance = metric candidates[0]\n        for candidate in candidates[1..]\n          distance = metric candidate\n          if distance < min_distance\n            [best_candidate, min_distance] = [candidate, distance]\n        matches.push\n          pattern: 'date'\n          token: token\n          i: i\n          j: j\n          separator: ''\n          year: best_candidate.year\n          month: best_candidate.month\n          day: best_candidate.day\n\n    # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n    for i in [0..password.length - 6]\n      for j in [i + 5..i + 9]\n        break if j >= password.length\n        token = password[i..j]\n        rx_match = maybe_date_with_separator.exec token\n        continue unless rx_match?\n        dmy = @map_ints_to_dmy [\n          parseInt rx_match[1]\n          parseInt rx_match[3]\n          parseInt rx_match[4]\n        ]\n        continue unless dmy?\n        matches.push\n          pattern: 'date'\n          token: token\n          i: i\n          j: j\n          separator: rx_match[2]\n          year: dmy.year\n          month: dmy.month\n          day: dmy.day\n\n    # matches now contains all valid date strings in a way that is tricky to capture\n    # with regexes only. while thorough, it will contain some unintuitive noise:\n    #\n    # '2015_06_04', in addition to matching 2015_06_04, will also contain\n    # 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n    #\n    # to reduce noise, remove date matches that are strict substrings of others\n    @sorted matches.filter (match) ->\n      is_submatch = false\n      for other_match in matches\n        continue if match is other_match\n        if other_match.i <= match.i and other_match.j >= match.j\n          is_submatch = true\n          break\n      not is_submatch\n\n  map_ints_to_dmy: (ints) ->\n    # given a 3-tuple, discard if:\n    #   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n    #   middle int is zero\n    #   any int is over the max allowable year\n    #   any int is over two digits but under the min allowable year\n    #   2 ints are over 31, the max allowable day\n    #   2 ints are zero\n    #   all ints are over 12, the max allowable month\n    return if ints[1] > 31 or ints[1] <= 0\n    over_12 = 0\n    over_31 = 0\n    under_1 = 0\n    for int in ints\n      return if 99 < int < DATE_MIN_YEAR or int > DATE_MAX_YEAR\n      over_31 += 1 if int > 31\n      over_12 += 1 if int > 12\n      under_1 += 1 if int <= 0\n    return if over_31 >= 2 or over_12 == 3 or under_1 >= 2\n\n    # first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n    possible_year_splits = [\n      [ints[2], ints[0..1]] # year last\n      [ints[0], ints[1..2]] # year first\n    ]\n    for [y, rest] in possible_year_splits\n      if DATE_MIN_YEAR <= y <= DATE_MAX_YEAR\n        dm = @map_ints_to_dm rest\n        if dm?\n          return {\n            year: y\n            month: dm.month\n            day: dm.day\n          }\n        else\n          # for a candidate that includes a four-digit year,\n          # when the remaining ints don't match to a day and month,\n          # it is not a date.\n          return\n\n    # given no four-digit year, two digit years are the most flexible int to match, so\n    # try to parse a day-month out of ints[0..1] or ints[1..0]\n    for [y, rest] in possible_year_splits\n      dm = @map_ints_to_dm rest\n      if dm?\n        y = @two_to_four_digit_year y\n        return {\n          year: y\n          month: dm.month\n          day: dm.day\n        }\n\n  map_ints_to_dm: (ints) ->\n    for [d, m] in [ints, ints.slice().reverse()]\n      if 1 <= d <= 31 and 1 <= m <= 12\n        return {\n          day: d\n          month: m\n        }\n\n  two_to_four_digit_year: (year) ->\n    if year > 99\n      year\n    else if year > 50\n      # 87 -> 1987\n      year + 1900\n    else\n      # 15 -> 2015\n      year + 2000\n\nmodule.exports = matching","time_estimates =\n  estimate_attack_times: (guesses) ->\n    crack_times_seconds =\n      online_throttling_100_per_hour: guesses / (100 / 3600)\n      online_no_throttling_10_per_second: guesses / 10\n      offline_slow_hashing_1e4_per_second: guesses / 1e4\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n\n    crack_times_display = {}\n    for scenario, seconds of crack_times_seconds\n      crack_times_display[scenario] = @display_time seconds\n\n    crack_times_seconds: crack_times_seconds\n    crack_times_display: crack_times_display\n    score: @guesses_to_score guesses\n\n\n  guesses_to_score: (guesses) ->\n    DELTA = 5\n    if guesses < 1e3 + DELTA\n      # risky password: \"too guessable\"\n      0\n    else if guesses < 1e6 + DELTA\n      # modest protection from throttled online attacks: \"very guessable\"\n      1\n    else if guesses < 1e8 + DELTA\n      # modest protection from unthrottled online attacks: \"somewhat guessable\"\n      2\n    else if guesses < 1e10 + DELTA\n      # modest protection from offline attacks: \"safely unguessable\"\n      # assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      3\n    else\n      # strong protection from offline attacks under same scenario: \"very unguessable\"\n      4\n\n  display_time: (seconds) ->\n    minute = 60\n    hour = minute * 60\n    day = hour * 24\n    month = day * 31\n    year = month * 12\n    century = year * 100\n    [display_num, display_str] = if seconds < 1\n      [null, 'less than a second']\n    else if seconds < minute\n      base = Math.round seconds\n      [base, \"#{base} second\"]\n    else if seconds < hour\n      base = Math.round seconds / minute\n      [base, \"#{base} minute\"]\n    else if seconds < day\n      base = Math.round seconds / hour\n      [base, \"#{base} hour\"]\n    else if seconds < month\n      base = Math.round seconds / day\n      [base, \"#{base} day\"]\n    else if seconds < year\n      base = Math.round seconds / month\n      [base, \"#{base} month\"]\n    else if seconds < century\n      base = Math.round seconds / year\n      [base, \"#{base} year\"]\n    else\n      [null, 'centuries']\n    display_str += 's' if display_num? and display_num != 1\n    display_str\n\nmodule.exports = time_estimates","scoring = require('./scoring')\n\nfeedback =\n  default_feedback:\n    warning: ''\n    suggestions: [\n      \"Use a few words, avoid common phrases\"\n      \"No need for symbols, digits, or uppercase letters\"\n    ]\n\n  get_feedback: (score, sequence) ->\n    # starting feedback\n    return @default_feedback if sequence.length == 0\n\n    # no feedback if score is good or great.\n    return if score > 2\n      warning: ''\n      suggestions: []\n\n    # tie feedback to the longest match for longer sequences\n    longest_match = sequence[0]\n    for match in sequence[1..]\n      longest_match = match if match.token.length > longest_match.token.length\n    feedback = @get_match_feedback(longest_match, sequence.length == 1)\n    extra_feedback = 'Add another word or two. Uncommon words are better.'\n    if feedback?\n      feedback.suggestions.unshift extra_feedback\n      feedback.warning = '' unless feedback.warning?\n    else\n      feedback =\n        warning: ''\n        suggestions: [extra_feedback]\n    feedback\n\n  get_match_feedback: (match, is_sole_match) ->\n    switch match.pattern\n      when 'dictionary'\n        @get_dictionary_match_feedback match, is_sole_match\n\n      when 'spatial'\n        layout = match.graph.toUpperCase()\n        warning = if match.turns == 1\n          'Straight rows of keys are easy to guess'\n        else\n          'Short keyboard patterns are easy to guess'\n        warning: warning\n        suggestions: [\n          'Use a longer keyboard pattern with more turns'\n        ]\n\n      when 'repeat'\n        warning = if match.base_token.length == 1\n          'Repeats like \"aaa\" are easy to guess'\n        else\n          'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"'\n        warning: warning\n        suggestions: [\n          'Avoid repeated words and characters'\n        ]\n\n      when 'sequence'\n        warning: \"Sequences like abc or 6543 are easy to guess\"\n        suggestions: [\n          'Avoid sequences'\n        ]\n\n      when 'regex'\n        if match.regex_name == 'recent_year'\n          warning: \"Recent years are easy to guess\"\n          suggestions: [\n            'Avoid recent years'\n            'Avoid years that are associated with you'\n          ]\n\n      when 'date'\n        warning: \"Dates are often easy to guess\"\n        suggestions: [\n          'Avoid dates and years that are associated with you'\n        ]\n\n  get_dictionary_match_feedback: (match, is_sole_match) ->\n    warning = if match.dictionary_name == 'passwords'\n      if is_sole_match and not match.l33t and not match.reversed\n        if match.rank <= 10\n          'This is a top-10 common password'\n        else if match.rank <= 100\n          'This is a top-100 common password'\n        else\n          'This is a very common password'\n      else if match.guesses_log10 <= 4\n        'This is similar to a commonly used password'\n    else if match.dictionary_name == 'english_wikipedia'\n      if is_sole_match\n        'A word by itself is easy to guess'\n    else if match.dictionary_name in ['surnames', 'male_names', 'female_names']\n      if is_sole_match\n        'Names and surnames by themselves are easy to guess'\n      else\n        'Common names and surnames are easy to guess'\n    else\n      ''\n\n    suggestions = []\n    word = match.token\n    if word.match(scoring.START_UPPER)\n      suggestions.push \"Capitalization doesn't help very much\"\n    else if word.match(scoring.ALL_UPPER) and word.toLowerCase() != word\n      suggestions.push \"All-uppercase is almost as easy to guess as all-lowercase\"\n\n    if match.reversed and match.token.length >= 4\n      suggestions.push \"Reversed words aren't much harder to guess\"\n    if match.l33t\n      suggestions.push \"Predictable substitutions like '@' instead of 'a' don't help very much\"\n\n    result =\n      warning: warning\n      suggestions: suggestions\n    result\n\nmodule.exports = feedback","matching = require './matching'\nscoring = require './scoring'\ntime_estimates = require './time_estimates'\nfeedback = require './feedback'\n\ntime = -> (new Date()).getTime()\n\nzxcvbn = (password, user_inputs = []) ->\n  start = time()\n  # reset the user inputs matcher on a per-request basis to keep things stateless\n  sanitized_inputs = []\n  for arg in user_inputs\n    if typeof arg in [\"string\", \"number\", \"boolean\"]\n      sanitized_inputs.push arg.toString().toLowerCase()\n  matching.set_user_input_dictionary sanitized_inputs\n  matches = matching.omnimatch password\n  result = scoring.most_guessable_match_sequence password, matches\n  result.calc_time = time() - start\n  attack_times = time_estimates.estimate_attack_times result.guesses\n  for prop, val of attack_times\n    result[prop] = val\n  result.feedback = feedback.get_feedback result.score, result.sequence\n  result\n\nmodule.exports = zxcvbn"],"names":["frequency_lists","split","adjacency_graphs","BRUTEFORCE_CARDINALITY","require$$0","calc_average_degree","graph","average","key","o","n","length","k","MIN_GUESSES_BEFORE_GROWING_SEQUENCE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","scoring","d","r","Math","log","f","i","password","matches","_exclude_additive","_","m","j","push","q","sort","m1","m2","_this","l","competing_g","estimate_guesses","optimal","pi","factorial","pow","competing_l","g","make_bruteforce_match","parseInt","last_m","pattern","update","candidate_g","candidate_l","unshift","optimal_match_sequence","w","unwind","optimal_l","guesses","log10","match","estimation_functions","token","bruteforce_guesses","dictionary_guesses","spatial_guesses","repeat_guesses","sequence_guesses","regex_guesses","date_guesses","call","max","min_guesses","guesses_log10","Number","POSITIVE_INFINITY","MAX_VALUE","base_guesses","repeat_count","charAt","first_chr","ascending","Date","getFullYear","char_class_bases","regex_name","abs","regex_match","REFERENCE_YEAR","year_space","MIN_YEAR_SPACE","year","separator","qwerty","keypad","L","ref","KEYBOARD_STARTING_POSITIONS","KEYBOARD_AVERAGE_DEGREE","KEYPAD_STARTING_POSITIONS","KEYPAD_AVERAGE_DEGREE","turns","min","t","nCk","s","shifted_count","S","U","shifted_variations","reversed_variations","rank","uppercase_variations","l33t_variations","reversed","word","ALL_LOWER","toLowerCase","regex","chr","variations","l33t","subbed","unsubbed","possibilities","DATE_MAX_YEAR","require$$1","require$$2","build_ranked_dict","ordered_list","result","RANKED_DICTIONARIES","name","lst","GRAPHS","dvorak","mac_keypad","L33T_TABLE","REGEXEN","DATE_MIN_YEAR","DATE_SPLITS","matching","obj","lst2","apply","string","chr_map","join","len1","dictionary_match","reverse_dictionary_match","l33t_match","spatial_match","repeat_match","sequence_match","date_match","extend","matcher","sorted","_ranked_dictionaries","dictionary_name","password_lower","ranked_dict","reverse","reversed_password","slice","table","letter","p","sub","password_chars","relevant_subs","subtable","subs","assoc","v","label","members","deduped","keys","dup_l33t_index","l33t_chr","concat","first_key","sub_extension","splice","sub_alternative","dedup","next_subs","helper","rest_keys","sub_dict","sub_dicts","_l33t_table","empty","translate","matched_word","subbed_chr","indexOf","match_sub","sub_display","filter","_graphs","graph_name","spatial_match_helper","adj","SHIFTED_RX","exec","prev_char","cur_char","cur_direction","last_direction","found_direction","found","base_analysis","lastIndex","lazy","greedy","greedy_match","lazy_match","lazy_anchored","index","most_guessable_match_sequence","base_token","omnimatch","sequence","base_matches","delta","MAX_DELTA","test","sequence_name","sequence_space","charCodeAt","last_delta","_regexen","rx_match","best_candidate","maybe_date_no_separator","map_ints_to_dmy","dmy","candidates","candidate","metric","distance","min_distance","month","day","maybe_date_with_separator","is_submatch","u","other_match","ints","dm","int","over_31","over_12","under_1","y","rest","map_ints_to_dm","two_to_four_digit_year","time_estimates","crack_times_display","scenario","display_time","seconds","crack_times_seconds","guesses_to_score","DELTA","base","minute","hour","round","century","display_num","display_str","feedback","score","extra_feedback","default_feedback","longest_match","get_match_feedback","suggestions","warning","is_sole_match","layout","get_dictionary_match_feedback","toUpperCase","START_UPPER","ALL_UPPER","require$$3","time","getTime","zxcvbn","user_inputs","arg","toString","set_user_input_dictionary","sanitized_inputs","calc_time","start","estimate_attack_times","prop","val","get_feedback"],"mappings":"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"}